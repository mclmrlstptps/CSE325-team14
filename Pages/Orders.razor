@page "/orders"
@using RestaurantMS.Models
@using RestaurantMS.Services
@inject OrderService OrderService
@inject NavigationManager Navigation

<h3>Order Management</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="NavigateToCreateOrder">
        <i class="bi bi-plus-circle"></i> Create New Order
    </button>
    <button class="btn btn-secondary ms-2" @onclick="LoadOrders">
        <i class="bi bi-arrow-clockwise"></i> Refresh
    </button>
</div>

@if (loading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (orders == null || orders.Count == 0)
{
    <div class="alert alert-info">
        <i class="bi bi-info-circle"></i> No orders found. Create your first order!
    </div>
}
else
{
    <div class="row">
        @foreach (var order in orders)
        {
            <div class="col-md-6 col-lg-4 mb-3">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <strong>Order #@order.Id?.Substring(order.Id.Length - 6)</strong>
                        <span class="badge @GetStatusBadgeClass(order.Status)">@order.Status</span>
                    </div>
                    <div class="card-body">
                        <h6 class="card-title">@order.CustomerName</h6>
                        <p class="card-text mb-1">
                            <small class="text-muted">
                                <i class="bi bi-envelope"></i> @order.CustomerEmail
                            </small>
                        </p>
                        <p class="card-text mb-2">
                            <small class="text-muted">
                                <i class="bi bi-telephone"></i> @order.CustomerPhone
                            </small>
                        </p>
                        <hr />
                        <h6>Items (@order.Items.Count)</h6>
                        <ul class="list-unstyled">
                            @foreach (var item in order.Items.Take(3))
                            {
                                <li class="mb-1">
                                    <small>@(item.MenuItem?.Name ?? "Unknown Item") x @item.Quantity - $@((item.Price * item.Quantity).ToString("F2"))</small>
                                </li>
                            }
                            @if (order.Items.Count > 3)
                            {
                                <li><small class="text-muted">+ @(order.Items.Count - 3) more items...</small></li>
                            }
                        </ul>
                        <hr />
                        <div class="d-flex justify-content-between align-items-center">
                            <strong>Total:</strong>
                            <strong class="text-primary">$@order.Total.ToString("F2")</strong>
                        </div>
                        <small class="text-muted">
                            <i class="bi bi-clock"></i> @order.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy h:mm tt")
                        </small>
                    </div>
                    <div class="card-footer">
                        <div class="btn-group w-100" role="group">
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewOrderDetails(order.Id)">
                                <i class="bi bi-eye"></i> View
                            </button>
                            <button class="btn btn-sm btn-outline-success" 
                                    @onclick="() => UpdateOrderStatus(order.Id, GetNextStatus(order.Status))"
                                    disabled="@(order.Status == "Completed" || order.Status == "Cancelled")">
                                <i class="bi bi-check-circle"></i> Next
                            </button>
                            <button class="btn btn-sm btn-outline-danger" 
                                    @onclick="() => DeleteOrder(order.Id)"
                                    disabled="@(order.Status == "Completed")">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<RestaurantMS.Models.Order> orders = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        loading = true;
        try
        {
            orders = await OrderService.GetAllOrdersAsync();
            orders = orders.OrderByDescending(o => o.CreatedAt).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private void NavigateToCreateOrder()
    {
        Navigation.NavigateTo("/orders/create");
    }

    private void ViewOrderDetails(string? orderId)
    {
        if (!string.IsNullOrEmpty(orderId))
        {
            Navigation.NavigateTo($"/orders/details/{orderId}");
        }
    }

    private async Task UpdateOrderStatus(string? orderId, string newStatus)
    {
        if (string.IsNullOrEmpty(orderId)) return;

        try
        {
            var order = await OrderService.GetOrderByIdAsync(orderId);
            if (order != null)
            {
                order.Status = newStatus;
                await OrderService.UpdateOrderAsync(orderId, order);
                await LoadOrders();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating order status: {ex.Message}");
        }
    }

    private async Task DeleteOrder(string? orderId)
    {
        if (string.IsNullOrEmpty(orderId)) return;

        try
        {
            await OrderService.DeleteOrderAsync(orderId);
            await LoadOrders();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting order: {ex.Message}");
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning text-dark",
            "Preparing" => "bg-info",
            "Ready" => "bg-primary",
            "Completed" => "bg-success",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetNextStatus(string currentStatus)
    {
        return currentStatus switch
        {
            "Pending" => "Preparing",
            "Preparing" => "Ready",
            "Ready" => "Completed",
            _ => currentStatus
        };
    }
}