@page "/login"
@using RestaurantMS.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject RestaurantMS.Services.AuthService AuthService
@inject RestaurantMS.Services.UserService UserService
@inject RestaurantMS.Services.CustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

<div class="auth-container">
    <div class="auth-card">
        <h2>Login</h2>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-danger">@message</div>
        }

        <EditForm Model="model" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label class="form-label">Email</label>
                <InputText @bind-Value="model.Email" type="email" class="form-control" placeholder="Enter your email" />
            </div>

            <div class="form-group mb-3">
                <label class="form-label">Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" placeholder="Enter your password" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                    <span>Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>

        <div class="mt-3 text-center">
            Don't have an account? <a href="/register">Register here</a>
        </div>
    </div>
</div>

@code {
    private LoginModel model = new();
    private string message = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        message = string.Empty;
        
        try
        {
            var success = await AuthService.LoginAsync(model.Email, model.Password);
            if (success)
            {
                // Get user details to extract role
                var user = await UserService.GetUserByEmailAsync(model.Email);

                if (user != null)
                {
                    // Mark user as authenticated in the auth state provider
                    await AuthStateProvider.MarkUserAsAuthenticated(
                        user.Email, 
                        user.Role,
                        user.Id,
                        user.Name
                    );

                    // Redirect based on role
                    Navigation.NavigateTo(user.Role switch
                    {
                        "Manager" => "/menu",
                        "Employee" => "/",
                        "Customer" => "/",
                        _ => "/"
                    }, forceLoad: true);
                }
            }
            else
            {
                message = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            message = $"Login failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
