@page "/shop"
@using Microsoft.AspNetCore.Components.Authorization
@using RestaurantMS.Services
@using RestaurantMS.Models
@using System.Security.Claims
@inject MenuItemService MenuItemService
@inject CartService CartService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="container mt-4">
    <h1>Our Menu</h1>
    <p class="lead">Browse our delicious menu items and place your order!</p>
    
    @if (menuItems == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            @foreach (var item in menuItems)
            {
                @if (item != null)
                {
                    <div class="col-md-4 mb-4">
                        <div class="card">
                            <img src="@GetImageUrl(item.Name)" class="card-img-top" alt="@item.Name" style="height: 200px; object-fit: cover;">
                            <div class="card-body">
                                <h5 class="card-title">@item.Name</h5>
                                <p class="card-text">@item.Description</p>
                                <p class="card-text"><strong>@item.Price.ToString("c")</strong></p>
                                <button class="btn btn-primary" @onclick="() => AddToCart(item)">Add to Cart</button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
    
    <div class="text-center mt-4">
        <AuthorizeView Roles="Customer">
            <a href="/my-orders" class="btn btn-outline-primary">View My Orders</a>
        </AuthorizeView>
    </div>
</div>

@code {
    private List<MenuItem> menuItems = new();

    protected override async Task OnInitializedAsync()
    {
        menuItems = await MenuItemService.GetAllMenuItemsAsync();
    }

    private async Task AddToCart(MenuItem menuItem)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirstValue("UserId");

        if (!string.IsNullOrEmpty(userId))
        {
            var orderItem = new OrderItem
            {
                MenuItemId = menuItem.Id,
                Price = menuItem.Price,
                Quantity = 1
            };

            await CartService.AddItemToCartAsync(userId, orderItem);
        }
    }

    private string GetImageUrl(string itemName)
    {
        if (itemName.Contains("Pizza")) return "images/pizza.jpg";
        if (itemName.Contains("Burger")) return "images/burger.jpg";
        if (itemName.Contains("Pasta")) return "images/pasta.jpg";
        return "images/restaurant-illustration.svg";
    }
}
