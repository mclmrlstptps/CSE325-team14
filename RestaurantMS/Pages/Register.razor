@page "/register"
<<<<<<< HEAD:Pages/Register.razor
@using RestaurantMS.Models
@inject AuthService AuthService
@inject NavigationManager Navigation

<h3>Register</h3>

<EditForm Model="newUser" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label>
        <InputText @bind-Value="newUser.Email" type="email" />
    </div>

    <div>
        <label>Name:</label>
        <InputText @bind-Value="newUser.Name" />
    </div>

    <div>
        <label>Password:</label>
        <InputText @bind-Value="password" type="password" />
    </div>

    <div>
        <label>Role:</label>
        <InputSelect @bind-Value="role">
            <option value="Employee">Employee</option>
            <option value="Manager">Manager</option>
        </InputSelect>
    </div>

    <button type="submit">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}

@code {
    private User newUser = new User();
    private string password = string.Empty;
    private string role = "Employee"; // default
    private string errorMessage = string.Empty;

    private async Task HandleRegister()
    {
        try
        {
            var result = await AuthService.RegisterAsync(
                newUser.Email,
                password,
                newUser.Name,
                role
            );

            if (result != null)
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
=======
@inject RestaurantMS.Services.AuthService AuthService
@inject NavigationManager Navigation
@using RestaurantMS.Models

<div class="auth-container">
    <div class="auth-card">
        <h2>Create an Account</h2>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="error-message">@message</div>
        }

        <EditForm Model="model" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <InputText @bind-Value="model.name" class="form-control" placeholder=" " />
                <label class="form-label">Name</label>
            </div>

            <div class="form-group">
                <InputText @bind-Value="model.email" type="email" class="form-control" placeholder=" " />
                <label class="form-label">Email</label>
            </div>

            <div class="form-group">
                <InputText @bind-Value="model.password" type="password" class="form-control" placeholder=" " />
                <label class="form-label">Password</label>
            </div>

            <div class="form-group">
                <InputText @bind-Value="model.confirmPassword" type="password" class="form-control" placeholder=" " />
                <label class="form-label">Confirm Password</label>
            </div>

            <div class="form-group">
                <InputSelect @bind-Value="model.role" class="form-control">
                    <option value="">Select Role</option>
                    <option value="Customer">Customer</option>
                    <option value="Employee">Employee</option>
                    <option value="Manager">Manager</option>
                </InputSelect>
                <label class="form-label">Role</label>
            </div>

            <button type="submit" class="btn btn-primary mt-3">Register</button>
        </EditForm>

        <div class="mt-3 text-center">
            Already have an account? <a href="/login">Login here</a>
        </div>
    </div>
</div>

@code {
    private RegisterModel model = new();
    private string message = string.Empty;

    private async Task HandleRegister()
    {
        if (string.IsNullOrWhiteSpace(model.role))
        {
            message = "Please select a role.";
            return;
        }

        if (model.password != model.confirmPassword)
        {
            message = "Passwords do not match.";
            return;
        }

        var newUser = new ApplicationUser
        {
            Name = model.name,
            Email = model.email,
            Role = model.role
        };

        var success = await AuthService.RegisterAsync(newUser, model.password);
        if (success)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            message = "Registration failed. Email may already exist.";
        }
    }

    private class RegisterModel
    {
        public string name { get; set; } = string.Empty;
        public string email { get; set; } = string.Empty;
        public string password { get; set; } = string.Empty;
        public string confirmPassword { get; set; } = string.Empty;
        public string role { get; set; } = string.Empty;
    }
>>>>>>> 517d0621a752bc05665cb323dbf9e254a43f7c37:RestaurantMS/Pages/Register.razor
}
